// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('Verifier');
const fs = require('fs');
proof = JSON.parse(fs.readFileSync("/home/yonghuajiang/Documents/Blockchain-Capstone/zokrates/code/proof.json"))

contract('Verification', accounts => {
  beforeEach(async function () {
      this.contract = await SquareVerifier.new({from: accounts[0]});
    })
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
it('It should pass the approval', async function () {
  let verification = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
  assert.equal(verification, true, "transcation was verified!");
})

// Test verification with incorrect proof
it('It should fail the approval', async function () {
  cheat = [...proof.inputs]
  cheat[cheat.length-1] = cheat[cheat.length-1].replace(/[01]$/, cheat[cheat.length-1][65] == '1' ? '0': '1')
  let verification = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, cheat);
  assert.equal(verification, false, "transcation shouldn't be approved!");
})

}
)
